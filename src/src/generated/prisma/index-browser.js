
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Wp_actionscheduler_actionsScalarFieldEnum = {
  action_id: 'action_id',
  hook: 'hook',
  status: 'status',
  scheduled_date_gmt: 'scheduled_date_gmt',
  scheduled_date_local: 'scheduled_date_local',
  priority: 'priority',
  args: 'args',
  schedule: 'schedule',
  group_id: 'group_id',
  attempts: 'attempts',
  last_attempt_gmt: 'last_attempt_gmt',
  last_attempt_local: 'last_attempt_local',
  claim_id: 'claim_id',
  extended_args: 'extended_args'
};

exports.Prisma.Wp_actionscheduler_claimsScalarFieldEnum = {
  claim_id: 'claim_id',
  date_created_gmt: 'date_created_gmt'
};

exports.Prisma.Wp_actionscheduler_groupsScalarFieldEnum = {
  group_id: 'group_id',
  slug: 'slug'
};

exports.Prisma.Wp_actionscheduler_logsScalarFieldEnum = {
  log_id: 'log_id',
  action_id: 'action_id',
  message: 'message',
  log_date_gmt: 'log_date_gmt',
  log_date_local: 'log_date_local'
};

exports.Prisma.Wp_addonlibrary_addonsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  name: 'name',
  alias: 'alias',
  addontype: 'addontype',
  description: 'description',
  ordering: 'ordering',
  templates: 'templates',
  config: 'config',
  catid: 'catid',
  is_active: 'is_active',
  test_slot1: 'test_slot1',
  test_slot2: 'test_slot2',
  test_slot3: 'test_slot3'
};

exports.Prisma.Wp_addonlibrary_categoriesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  alias: 'alias',
  ordering: 'ordering',
  params: 'params',
  type: 'type',
  parent_id: 'parent_id'
};

exports.Prisma.Wp_ai_stats_eventsScalarFieldEnum = {
  id: 'id',
  dtime: 'dtime',
  track_url: 'track_url',
  track_title: 'track_title',
  track_artist: 'track_artist',
  playlist_id: 'playlist_id',
  referrer_url: 'referrer_url',
  client_fingerprint: 'client_fingerprint',
  event_name: 'event_name',
  event_data: 'event_data',
  is_stream: 'is_stream',
  processed: 'processed'
};

exports.Prisma.Wp_ai_stats_playScalarFieldEnum = {
  id: 'id',
  track_id: 'track_id',
  dtime: 'dtime',
  playlist_id: 'playlist_id',
  referrer_url: 'referrer_url',
  client_fingerprint: 'client_fingerprint',
  duration: 'duration',
  seeks: 'seeks',
  pauses: 'pauses',
  skipped: 'skipped',
  downloaded: 'downloaded'
};

exports.Prisma.Wp_ai_stats_trackScalarFieldEnum = {
  id: 'id',
  url: 'url',
  url_hash: 'url_hash',
  title: 'title',
  artist: 'artist',
  duration_mean: 'duration_mean',
  duration_count: 'duration_count',
  is_stream: 'is_stream'
};

exports.Prisma.Wp_audier_elementor_cacheScalarFieldEnum = {
  id: 'id',
  key: 'key',
  data: 'data',
  updated_at: 'updated_at'
};

exports.Prisma.Wp_commentmetaScalarFieldEnum = {
  meta_id: 'meta_id',
  comment_id: 'comment_id',
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.Wp_commentsScalarFieldEnum = {
  comment_ID: 'comment_ID',
  comment_post_ID: 'comment_post_ID',
  comment_author: 'comment_author',
  comment_author_email: 'comment_author_email',
  comment_author_url: 'comment_author_url',
  comment_author_IP: 'comment_author_IP',
  comment_date: 'comment_date',
  comment_date_gmt: 'comment_date_gmt',
  comment_content: 'comment_content',
  comment_karma: 'comment_karma',
  comment_approved: 'comment_approved',
  comment_agent: 'comment_agent',
  comment_type: 'comment_type',
  comment_parent: 'comment_parent',
  user_id: 'user_id'
};

exports.Prisma.Wp_cpmp_playerScalarFieldEnum = {
  id: 'id',
  player_name: 'player_name',
  config: 'config',
  playlist: 'playlist'
};

exports.Prisma.Wp_e_eventsScalarFieldEnum = {
  id: 'id',
  event_data: 'event_data',
  created_at: 'created_at'
};

exports.Prisma.Wp_e_notesScalarFieldEnum = {
  id: 'id',
  route_url: 'route_url',
  route_title: 'route_title',
  route_post_id: 'route_post_id',
  post_id: 'post_id',
  element_id: 'element_id',
  parent_id: 'parent_id',
  author_id: 'author_id',
  author_display_name: 'author_display_name',
  status: 'status',
  position: 'position',
  content: 'content',
  is_resolved: 'is_resolved',
  is_public: 'is_public',
  last_activity_at: 'last_activity_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Wp_e_notes_users_relationsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  note_id: 'note_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Wp_e_submissionsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  hash_id: 'hash_id',
  main_meta_id: 'main_meta_id',
  post_id: 'post_id',
  referer: 'referer',
  referer_title: 'referer_title',
  element_id: 'element_id',
  form_name: 'form_name',
  campaign_id: 'campaign_id',
  user_id: 'user_id',
  user_ip: 'user_ip',
  user_agent: 'user_agent',
  actions_count: 'actions_count',
  actions_succeeded_count: 'actions_succeeded_count',
  status: 'status',
  is_read: 'is_read',
  meta: 'meta',
  created_at_gmt: 'created_at_gmt',
  updated_at_gmt: 'updated_at_gmt',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Wp_e_submissions_actions_logScalarFieldEnum = {
  id: 'id',
  submission_id: 'submission_id',
  action_name: 'action_name',
  action_label: 'action_label',
  status: 'status',
  log: 'log',
  created_at_gmt: 'created_at_gmt',
  updated_at_gmt: 'updated_at_gmt',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Wp_e_submissions_valuesScalarFieldEnum = {
  id: 'id',
  submission_id: 'submission_id',
  key: 'key',
  value: 'value'
};

exports.Prisma.Wp_jet_post_typesScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  status: 'status',
  labels: 'labels',
  args: 'args',
  meta_fields: 'meta_fields'
};

exports.Prisma.Wp_jet_smart_filters_indexerScalarFieldEnum = {
  id: 'id',
  type: 'type',
  item_id: 'item_id',
  item_query: 'item_query',
  item_key: 'item_key',
  item_value: 'item_value'
};

exports.Prisma.Wp_jet_taxonomiesScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  object_type: 'object_type',
  status: 'status',
  labels: 'labels',
  args: 'args',
  meta_fields: 'meta_fields'
};

exports.Prisma.Wp_linksScalarFieldEnum = {
  link_id: 'link_id',
  link_url: 'link_url',
  link_name: 'link_name',
  link_image: 'link_image',
  link_target: 'link_target',
  link_description: 'link_description',
  link_visible: 'link_visible',
  link_owner: 'link_owner',
  link_rating: 'link_rating',
  link_updated: 'link_updated',
  link_rel: 'link_rel',
  link_notes: 'link_notes',
  link_rss: 'link_rss'
};

exports.Prisma.Wp_optionsScalarFieldEnum = {
  option_id: 'option_id',
  option_name: 'option_name',
  option_value: 'option_value',
  autoload: 'autoload'
};

exports.Prisma.Wp_postmetaScalarFieldEnum = {
  meta_id: 'meta_id',
  post_id: 'post_id',
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.Wp_postsScalarFieldEnum = {
  ID: 'ID',
  post_author: 'post_author',
  post_date: 'post_date',
  post_date_gmt: 'post_date_gmt',
  post_content: 'post_content',
  post_title: 'post_title',
  post_excerpt: 'post_excerpt',
  post_status: 'post_status',
  comment_status: 'comment_status',
  ping_status: 'ping_status',
  post_password: 'post_password',
  post_name: 'post_name',
  to_ping: 'to_ping',
  pinged: 'pinged',
  post_modified: 'post_modified',
  post_modified_gmt: 'post_modified_gmt',
  post_content_filtered: 'post_content_filtered',
  post_parent: 'post_parent',
  guid: 'guid',
  menu_order: 'menu_order',
  post_type: 'post_type',
  post_mime_type: 'post_mime_type',
  comment_count: 'comment_count'
};

exports.Prisma.Wp_rank_math_internal_linksScalarFieldEnum = {
  id: 'id',
  url: 'url',
  post_id: 'post_id',
  target_post_id: 'target_post_id',
  type: 'type'
};

exports.Prisma.Wp_rank_math_internal_metaScalarFieldEnum = {
  object_id: 'object_id',
  internal_link_count: 'internal_link_count',
  external_link_count: 'external_link_count',
  incoming_link_count: 'incoming_link_count'
};

exports.Prisma.Wp_rtl_rsm_logsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  section: 'section',
  result: 'result',
  date: 'date'
};

exports.Prisma.Wp_soogname_metaScalarFieldEnum = {
  meta_ID: 'meta_ID',
  object_ID: 'object_ID'
};

exports.Prisma.Wp_term_relationshipsScalarFieldEnum = {
  object_id: 'object_id',
  term_taxonomy_id: 'term_taxonomy_id',
  term_order: 'term_order'
};

exports.Prisma.Wp_term_taxonomyScalarFieldEnum = {
  term_taxonomy_id: 'term_taxonomy_id',
  term_id: 'term_id',
  taxonomy: 'taxonomy',
  description: 'description',
  parent: 'parent',
  count: 'count'
};

exports.Prisma.Wp_termmetaScalarFieldEnum = {
  meta_id: 'meta_id',
  term_id: 'term_id',
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.Wp_termsScalarFieldEnum = {
  term_id: 'term_id',
  name: 'name',
  slug: 'slug',
  term_group: 'term_group'
};

exports.Prisma.Wp_usermetaScalarFieldEnum = {
  umeta_id: 'umeta_id',
  user_id: 'user_id',
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.Wp_usersScalarFieldEnum = {
  ID: 'ID',
  user_login: 'user_login',
  user_pass: 'user_pass',
  user_nicename: 'user_nicename',
  user_email: 'user_email',
  user_url: 'user_url',
  user_registered: 'user_registered',
  user_activation_key: 'user_activation_key',
  user_status: 'user_status',
  display_name: 'display_name'
};

exports.Prisma.Wp_wpr_above_the_foldScalarFieldEnum = {
  id: 'id',
  url: 'url',
  is_mobile: 'is_mobile',
  lcp: 'lcp',
  viewport: 'viewport',
  error_message: 'error_message',
  status: 'status',
  modified: 'modified',
  last_accessed: 'last_accessed'
};

exports.Prisma.Wp_wpr_rocket_cacheScalarFieldEnum = {
  id: 'id',
  url: 'url',
  status: 'status',
  modified: 'modified',
  last_accessed: 'last_accessed',
  is_locked: 'is_locked'
};

exports.Prisma.Wp_wpr_rucss_used_cssScalarFieldEnum = {
  id: 'id',
  url: 'url',
  css: 'css',
  hash: 'hash',
  error_code: 'error_code',
  error_message: 'error_message',
  unprocessedcss: 'unprocessedcss',
  retries: 'retries',
  is_mobile: 'is_mobile',
  job_id: 'job_id',
  queue_name: 'queue_name',
  status: 'status',
  modified: 'modified',
  last_accessed: 'last_accessed',
  submitted_at: 'submitted_at',
  next_retry_time: 'next_retry_time'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.wp_actionscheduler_actionsOrderByRelevanceFieldEnum = {
  hook: 'hook',
  status: 'status',
  args: 'args',
  schedule: 'schedule',
  extended_args: 'extended_args'
};

exports.Prisma.wp_actionscheduler_groupsOrderByRelevanceFieldEnum = {
  slug: 'slug'
};

exports.Prisma.wp_actionscheduler_logsOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.wp_addonlibrary_addonsOrderByRelevanceFieldEnum = {
  title: 'title',
  name: 'name',
  alias: 'alias',
  addontype: 'addontype',
  description: 'description',
  templates: 'templates',
  config: 'config',
  test_slot1: 'test_slot1',
  test_slot2: 'test_slot2',
  test_slot3: 'test_slot3'
};

exports.Prisma.wp_addonlibrary_categoriesOrderByRelevanceFieldEnum = {
  title: 'title',
  alias: 'alias',
  params: 'params',
  type: 'type'
};

exports.Prisma.wp_ai_stats_eventsOrderByRelevanceFieldEnum = {
  track_url: 'track_url',
  track_title: 'track_title',
  track_artist: 'track_artist',
  referrer_url: 'referrer_url',
  client_fingerprint: 'client_fingerprint',
  event_name: 'event_name',
  event_data: 'event_data'
};

exports.Prisma.wp_ai_stats_playOrderByRelevanceFieldEnum = {
  referrer_url: 'referrer_url',
  client_fingerprint: 'client_fingerprint'
};

exports.Prisma.wp_ai_stats_trackOrderByRelevanceFieldEnum = {
  url: 'url',
  url_hash: 'url_hash',
  title: 'title',
  artist: 'artist'
};

exports.Prisma.wp_audier_elementor_cacheOrderByRelevanceFieldEnum = {
  key: 'key',
  data: 'data'
};

exports.Prisma.wp_commentmetaOrderByRelevanceFieldEnum = {
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.wp_commentsOrderByRelevanceFieldEnum = {
  comment_author: 'comment_author',
  comment_author_email: 'comment_author_email',
  comment_author_url: 'comment_author_url',
  comment_author_IP: 'comment_author_IP',
  comment_content: 'comment_content',
  comment_approved: 'comment_approved',
  comment_agent: 'comment_agent',
  comment_type: 'comment_type'
};

exports.Prisma.wp_cpmp_playerOrderByRelevanceFieldEnum = {
  player_name: 'player_name',
  config: 'config',
  playlist: 'playlist'
};

exports.Prisma.wp_e_eventsOrderByRelevanceFieldEnum = {
  event_data: 'event_data'
};

exports.Prisma.wp_e_notesOrderByRelevanceFieldEnum = {
  route_url: 'route_url',
  route_title: 'route_title',
  element_id: 'element_id',
  author_display_name: 'author_display_name',
  status: 'status',
  position: 'position',
  content: 'content'
};

exports.Prisma.wp_e_notes_users_relationsOrderByRelevanceFieldEnum = {
  type: 'type'
};

exports.Prisma.wp_e_submissionsOrderByRelevanceFieldEnum = {
  type: 'type',
  hash_id: 'hash_id',
  referer: 'referer',
  referer_title: 'referer_title',
  element_id: 'element_id',
  form_name: 'form_name',
  user_ip: 'user_ip',
  user_agent: 'user_agent',
  status: 'status',
  meta: 'meta'
};

exports.Prisma.wp_e_submissions_actions_logOrderByRelevanceFieldEnum = {
  action_name: 'action_name',
  action_label: 'action_label',
  status: 'status',
  log: 'log'
};

exports.Prisma.wp_e_submissions_valuesOrderByRelevanceFieldEnum = {
  key: 'key',
  value: 'value'
};

exports.Prisma.wp_jet_post_typesOrderByRelevanceFieldEnum = {
  slug: 'slug',
  status: 'status',
  labels: 'labels',
  args: 'args',
  meta_fields: 'meta_fields'
};

exports.Prisma.wp_jet_smart_filters_indexerOrderByRelevanceFieldEnum = {
  type: 'type',
  item_query: 'item_query',
  item_key: 'item_key',
  item_value: 'item_value'
};

exports.Prisma.wp_jet_taxonomiesOrderByRelevanceFieldEnum = {
  slug: 'slug',
  object_type: 'object_type',
  status: 'status',
  labels: 'labels',
  args: 'args',
  meta_fields: 'meta_fields'
};

exports.Prisma.wp_linksOrderByRelevanceFieldEnum = {
  link_url: 'link_url',
  link_name: 'link_name',
  link_image: 'link_image',
  link_target: 'link_target',
  link_description: 'link_description',
  link_visible: 'link_visible',
  link_rel: 'link_rel',
  link_notes: 'link_notes',
  link_rss: 'link_rss'
};

exports.Prisma.wp_optionsOrderByRelevanceFieldEnum = {
  option_name: 'option_name',
  option_value: 'option_value',
  autoload: 'autoload'
};

exports.Prisma.wp_postmetaOrderByRelevanceFieldEnum = {
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.wp_postsOrderByRelevanceFieldEnum = {
  post_content: 'post_content',
  post_title: 'post_title',
  post_excerpt: 'post_excerpt',
  post_status: 'post_status',
  comment_status: 'comment_status',
  ping_status: 'ping_status',
  post_password: 'post_password',
  post_name: 'post_name',
  to_ping: 'to_ping',
  pinged: 'pinged',
  post_content_filtered: 'post_content_filtered',
  guid: 'guid',
  post_type: 'post_type',
  post_mime_type: 'post_mime_type'
};

exports.Prisma.wp_rank_math_internal_linksOrderByRelevanceFieldEnum = {
  url: 'url',
  type: 'type'
};

exports.Prisma.wp_rtl_rsm_logsOrderByRelevanceFieldEnum = {
  type: 'type',
  section: 'section',
  result: 'result'
};

exports.Prisma.wp_term_taxonomyOrderByRelevanceFieldEnum = {
  taxonomy: 'taxonomy',
  description: 'description'
};

exports.Prisma.wp_termmetaOrderByRelevanceFieldEnum = {
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.wp_termsOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug'
};

exports.Prisma.wp_usermetaOrderByRelevanceFieldEnum = {
  meta_key: 'meta_key',
  meta_value: 'meta_value'
};

exports.Prisma.wp_usersOrderByRelevanceFieldEnum = {
  user_login: 'user_login',
  user_pass: 'user_pass',
  user_nicename: 'user_nicename',
  user_email: 'user_email',
  user_url: 'user_url',
  user_activation_key: 'user_activation_key',
  display_name: 'display_name'
};

exports.Prisma.wp_wpr_above_the_foldOrderByRelevanceFieldEnum = {
  url: 'url',
  lcp: 'lcp',
  viewport: 'viewport',
  error_message: 'error_message',
  status: 'status'
};

exports.Prisma.wp_wpr_rocket_cacheOrderByRelevanceFieldEnum = {
  url: 'url',
  status: 'status'
};

exports.Prisma.wp_wpr_rucss_used_cssOrderByRelevanceFieldEnum = {
  url: 'url',
  css: 'css',
  hash: 'hash',
  error_code: 'error_code',
  error_message: 'error_message',
  unprocessedcss: 'unprocessedcss',
  job_id: 'job_id',
  queue_name: 'queue_name',
  status: 'status'
};


exports.Prisma.ModelName = {
  wp_actionscheduler_actions: 'wp_actionscheduler_actions',
  wp_actionscheduler_claims: 'wp_actionscheduler_claims',
  wp_actionscheduler_groups: 'wp_actionscheduler_groups',
  wp_actionscheduler_logs: 'wp_actionscheduler_logs',
  wp_addonlibrary_addons: 'wp_addonlibrary_addons',
  wp_addonlibrary_categories: 'wp_addonlibrary_categories',
  wp_ai_stats_events: 'wp_ai_stats_events',
  wp_ai_stats_play: 'wp_ai_stats_play',
  wp_ai_stats_track: 'wp_ai_stats_track',
  wp_audier_elementor_cache: 'wp_audier_elementor_cache',
  wp_commentmeta: 'wp_commentmeta',
  wp_comments: 'wp_comments',
  wp_cpmp_player: 'wp_cpmp_player',
  wp_e_events: 'wp_e_events',
  wp_e_notes: 'wp_e_notes',
  wp_e_notes_users_relations: 'wp_e_notes_users_relations',
  wp_e_submissions: 'wp_e_submissions',
  wp_e_submissions_actions_log: 'wp_e_submissions_actions_log',
  wp_e_submissions_values: 'wp_e_submissions_values',
  wp_jet_post_types: 'wp_jet_post_types',
  wp_jet_smart_filters_indexer: 'wp_jet_smart_filters_indexer',
  wp_jet_taxonomies: 'wp_jet_taxonomies',
  wp_links: 'wp_links',
  wp_options: 'wp_options',
  wp_postmeta: 'wp_postmeta',
  wp_posts: 'wp_posts',
  wp_rank_math_internal_links: 'wp_rank_math_internal_links',
  wp_rank_math_internal_meta: 'wp_rank_math_internal_meta',
  wp_rtl_rsm_logs: 'wp_rtl_rsm_logs',
  wp_soogname_meta: 'wp_soogname_meta',
  wp_term_relationships: 'wp_term_relationships',
  wp_term_taxonomy: 'wp_term_taxonomy',
  wp_termmeta: 'wp_termmeta',
  wp_terms: 'wp_terms',
  wp_usermeta: 'wp_usermeta',
  wp_users: 'wp_users',
  wp_wpr_above_the_fold: 'wp_wpr_above_the_fold',
  wp_wpr_rocket_cache: 'wp_wpr_rocket_cache',
  wp_wpr_rucss_used_css: 'wp_wpr_rucss_used_css'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
